package pexel.image.finder.portlet.action;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.liferay.document.library.kernel.model.DLFileEntry;
import com.liferay.document.library.kernel.model.DLFolder;
import com.liferay.document.library.kernel.model.DLFolderConstants;
import com.liferay.document.library.kernel.service.DLAppServiceUtil;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.log.Log;
import com.liferay.portal.kernel.log.LogFactoryUtil;
import com.liferay.portal.kernel.portlet.bridges.mvc.BaseMVCActionCommand;
import com.liferay.portal.kernel.portlet.bridges.mvc.MVCActionCommand;
import com.liferay.portal.kernel.repository.model.Folder;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.ServiceContextFactory;
import com.liferay.portal.kernel.theme.ThemeDisplay;
import com.liferay.portal.kernel.util.ParamUtil;
import com.liferay.portal.kernel.util.WebKeys;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpUriRequest;
import org.apache.http.client.methods.RequestBuilder;
import org.apache.http.impl.client.HttpClientBuilder;
import org.apache.http.util.EntityUtils;
import org.osgi.service.component.annotations.Component;
import pexel.image.finder.constants.PexelImageFinderPortletKeys;

import javax.portlet.ActionRequest;
import javax.portlet.ActionResponse;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.URLEncoder;
import java.util.HashMap;

@Component(
        immediate = true,
        property = {
                "javax.portlet.name=" + PexelImageFinderPortletKeys.PEXELIMAGEFINDER,
                "mvc.command.name=" + PexelImageFinderPortletKeys.IMPORT_COMMAND
        },
        service = MVCActionCommand.class
)
public class PexelImageImportMVCActionCommand extends BaseMVCActionCommand {
    private String PATH = "/images/pexels";

    @Override
    protected void doProcessAction(ActionRequest actionRequest, ActionResponse actionResponse) throws Exception {
        System.out.println("the import is on...");
        //todo only if it's a logged in user

        HttpUriRequest request = RequestBuilder
                .get("https://images.pexels.com/photos/2014422/pexels-photo-2014422.jpeg")
                //.addHeader("Authorization", PexelImageFinderPortletKeys.APIKEY)
                .build();

        // first create required folder structure
        ThemeDisplay themeDisplay = (ThemeDisplay) actionRequest.getAttribute(WebKeys.THEME_DISPLAY);
        ServiceContext serviceContext = ServiceContextFactory.getInstance(DLFolder.class.getName(), actionRequest);

        long folderID = DLFolderConstants.DEFAULT_PARENT_FOLDER_ID;

        String[] path = PATH.substring(1).split("/");
        System.out.println(path.length);
        for (String directory : path) {
            System.out.println("Create folder: " + directory);
            Folder folder = null;
            try {
                folder = DLAppServiceUtil.getFolder(themeDisplay.getScopeGroupId(), folderID, directory);
            } catch (PortalException x){
                // guess it doesn't exist, try to create one
                folder = DLAppServiceUtil.addFolder(themeDisplay.getScopeGroupId(), folderID, directory, "auto generated by pexels", serviceContext);
            }
            folderID = folder.getFolderId();
            System.out.println(folderID);
        }

        // upload file to folder
        HttpClient client = HttpClientBuilder.create().build();
        HttpResponse response = null;
        try {
            response = client.execute(request);
            HttpEntity entity = response.getEntity();
            if (entity != null && response.getStatusLine().getStatusCode() == 200) {
                try (InputStream inputStream = entity.getContent()) {
                    // do something useful with the stream
                    DLAppServiceUtil.addFileEntry(themeDisplay.getScopeGroupId(), folderID, "123.jpeg", response.getEntity().getContentType().getValue(),
                            "123 bag", "auto import pexels", "", inputStream, response.getEntity().getContentLength(), serviceContext);
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        //hideDefaultSuccessMessage(actionRequest);
    }

    private String getRequest(HttpUriRequest request) {
        HttpClient client = HttpClientBuilder.create().build();

        HttpResponse response = null;
        try {
            response = client.execute(request);
            HttpEntity entity = response.getEntity();
            if (response.getStatusLine().getStatusCode() == 200) {
                return EntityUtils.toString(entity, "UTF-8");
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        return "";
    }

    private static final Log _log = LogFactoryUtil.getLog(PexelImageImportMVCActionCommand.class);
}